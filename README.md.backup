# Seoul Street View Analysis

A machine learning project for predicting Urban Vitality Index (UVI) from street view images using deep learning-based image segmentation and ensemble regression models.

## Overview

This project analyzes urban vitality in three Seoul locations—**Hongdae**, **Syarosu-gil**, and **Sookgogae-gil**—by combining Google Street View images with semantic segmentation and machine learning. The goal is to predict the Urban Vitality Index based on visual features extracted from street-level imagery.

### Key Features

- **Automated Image Collection**: Fetch street view images along specified paths using Google Maps API
- **Semantic Segmentation**: Extract urban features (buildings, roads, sky, vegetation, pedestrians) using FCN-ResNet50
- **ML-Based Prediction**: Predict Urban Vitality Index using multiple regression models
- **Modular Architecture**: Clean, reusable Python modules for each pipeline stage

## Project Structure

```
seoul-streetview-analysis/
├── src/                          # Source code modules
│   ├── __init__.py              # Package initialization
│   └── seoul_streetview/
│       ├── __init__.py
│       ├── data/
│       │   ├── __init__.py      # Google Maps API integration & sample data
│       │   ├── image_getter.py  # Google Maps API image fetching
│       │   └── sample_generator.py
│       ├── segmentation/
│       │   ├── __init__.py
│       │   └── segmenter.py     # Image segmentation with ResNet50
│       ├── modeling/
│       │   ├── __init__.py
│       │   └── modeling.py      # ML modeling and prediction
│       └── utils/
│           ├── __init__.py      # Shared helpers and logging utilities
│           └── exceptions.py
├── notebooks/                    # Jupyter notebooks (archived)
│   ├── image_getter.ipynb
│   ├── segmenter.ipynb
│   └── modeling_prediction.ipynb
├── data/                         # Data directory
│   ├── raw/                     # Raw street view images
│   │   ├── hongdae/
│   │   ├── syarosu/
│   │   └── ssook/
│   └── processed/               # Processed segmentation data
├── class_percentages.csv         # Segmentation results
├── Urban_vitality_index.xlsx    # UVI ground truth data
├── requirements.txt              # Python dependencies
├── .env.example                 # Environment variable template
└── README.md                    # This file
```

## Installation

### Prerequisites

- Python 3.8+
- pip package manager
- (Optional) Google Maps API key for fetching new street view images

### Setup

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd seoul-streetview-analysis
   ```

2. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

3. **Configure API key** (optional, only for fetching new images)
   ```bash
   cp .env.example .env
   # Edit .env and add your Google Maps API key
   ```

## Usage

### Option 1: Using Existing Data

The project includes pre-collected images and processed data. You can directly run the modeling pipeline:

```bash
# Run segmentation on existing images
python -m src.seoul_streetview.segmentation.segmenter

# Train and evaluate ML models
python -m src.seoul_streetview.modeling.modeling
```

### Option 2: Fetching New Images

If you have a Google Maps API key:

```bash
python -m src.seoul_streetview.data.image_getter
```

This will fetch street view images for the three locations specified in the script.

### Option 3: Using Sample Data

For testing without API keys or actual data:

```bash
python -m src.seoul_streetview.data.sample_generator
```

This generates synthetic street view images and corresponding data.

## Pipeline Overview

### 1. Image Collection (`data/image_getter.py`)

Fetches street view images from Google Maps API along specified paths.

**Features:**
- Configurable start/end coordinates
- Multiple camera headings (0°, 90°, 180°, 270°)
- Batch processing for multiple locations

**Example:**
```python
from src.seoul_streetview.data import StreetViewImageGetter

getter = StreetViewImageGetter(api_key="YOUR_API_KEY")
getter.fetch_images_along_path(
    start_lat=37.554197,
    start_lon=126.922500,
    end_lat=37.550833,
    end_lon=126.921323,
    num_points=40,
    output_folder="data/raw/hongdae",
    prefix="hongdae_image"
)
```

### 2. Image Segmentation (`segmentation/segmenter.py`)

Performs semantic segmentation using FCN-ResNet50 pre-trained on COCO dataset.

**Extracted Features:**
- Unlabeled areas
- Ground/pavement
- Buildings
- Roads
- Green spaces (vegetation)
- Sky
- Pedestrians
- Secondary building features

**Example:**
```python
from src.seoul_streetview.segmentation import StreetViewSegmenter

segmenter = StreetViewSegmenter()

# Process single image
percentages = segmenter.segment_image("path/to/image.jpg")

# Process entire folder
df = segmenter.process_folder(
    input_folder="data/raw/hongdae",
    output_csv="data/processed/hongdae_segmentation.csv"
)
```

### 3. ML Modeling (`modeling/modeling.py`)

Trains and evaluates regression models to predict Urban Vitality Index.

**Models Implemented:**
- Decision Tree Regressor
- Random Forest Regressor
- Gradient Boosting Regressor (best performer)
- Support Vector Regression (SVR)
- K-Nearest Neighbors Regressor

**Example:**
```python
from src.seoul_streetview.modeling import UVIPredictor

predictor = UVIPredictor()

# Prepare data
X_train, X_test, y_train, y_test = predictor.prepare_data(
    segmentation_csv="class_percentages.csv",
    uvi_excel="Urban_vitality_index.xlsx"
)

# Train models
predictor.train_models(X_train, y_train)

# Evaluate
predictor.evaluate_models(X_train, X_test, y_train, y_test)
predictor.print_results()

# Make predictions
predictions = predictor.predict(X_test, model_name='Gradient Boosting')
```

## Results

The project evaluates five different machine learning models. Typical performance metrics:

| Model | Train R² | Test R² | Test RMSE | Test MAE |
|-------|----------|---------|-----------|----------|
| Gradient Boosting | 0.24 | 0.01 | ~1.2 | ~1.0 |
| Random Forest | 0.84 | -0.04 | ~1.3 | ~1.1 |
| Decision Tree | 0.03 | -0.10 | ~1.4 | ~1.2 |

**Note:** Model performance may vary depending on data quality and quantity. The relatively low test R² scores suggest that visual features alone may not fully capture urban vitality, and additional features (foot traffic, business density, etc.) could improve predictions.

## Study Locations

### 1. Hongdae (홍대)
- **Coordinates**: 37.554197, 126.922500 → 37.550833, 126.921323
- **Images**: 160 (40 points × 4 headings)
- **Character**: Vibrant youth culture district with high pedestrian activity

### 2. Syarosu-gil (샤로수길)
- **Coordinates**: 37.479241, 126.952545 → 37.479476, 126.944457
- **Images**: 80 (20 points × 4 headings)
- **Character**: Trendy commercial area with cafes and boutiques

### 3. Sookgogae-gil (쑥고개길)
- **Coordinates**: 37.478701, 126.952144 → 37.479476, 126.944457
- **Images**: 80 (20 points × 4 headings)
- **Character**: Residential area with mixed commercial use

## Technologies Used

- **Python 3.8+**: Core programming language
- **PyTorch & torchvision**: Deep learning framework for segmentation
- **scikit-learn**: Machine learning models and evaluation
- **pandas & numpy**: Data manipulation and analysis
- **matplotlib**: Visualization
- **Google Maps API**: Street view image collection
- **Pillow**: Image processing

## Future Improvements

- [ ] Incorporate temporal data (time-of-day, day-of-week variations)
- [ ] Add more feature sources (POI data, demographic data)
- [ ] Experiment with end-to-end deep learning (CNN → UVI prediction)
- [ ] Expand to more Seoul neighborhoods
- [ ] Deploy as web service with interactive map

## Contributing

This is an academic project. For questions or suggestions, please open an issue.

## License

This project is for educational purposes. Please respect Google Maps API terms of service when collecting imagery.

## Acknowledgments

- Google Maps Platform for Street View API
- PyTorch team for torchvision models
- Seoul Metropolitan Government for urban vitality data

## Contact

For questions about this project, please create an issue in the repository.

---

**Project Type**: Academic Research
**Domain**: Urban Analytics, Computer Vision, Machine Learning
**Status**: Completed Assignment